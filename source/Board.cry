import Graphics2D;
import Math;
import Random;

class Board {

	field id;
	field theme;
	field mode;
	field columns;
	field rows;
	field fall_enabled;
	field left;
	field top;
	field state;
	field grid;
	field players;
	field fall_interval;
	field fall_countdown;
	field counts;
	field images;
	field explode_images;

	constructor(id, theme, mode) {
		this.id = id;
		this.theme = theme;
		this.mode = mode;
		this.columns = mode.columns;
		this.rows = mode.rows;
		this.fall_enabled = mode.fall_enabled;
		this.left = mode.render_left + mode.render_gap * (id - 1);
		this.top = mode.render_top;
		this.state = null;
		
		this.grid = make_grid(this.columns, this.rows);
		
		this.players = [];
		
		x = this.mode.player_start_x;
		y = this.mode.player_start_y;
		spacing = this.mode.player_spacing_x;
		for (i = 0; i < mode.players_per_board; ++i) {
			this.players.add(new Player(i + 1, x, y, 'up', Colors.BLUE));
			x += spacing;
		}
		
		if (this.fall_enabled) {
			this.fall_interval = FPS * 10; // 10 seconds
			this.fall_countdown = this.fall_interval;
		}
		
		this.counts = {};
		for (color : Globals.ALL_COLORS) {
			this.counts[color] = 0;
		}
		this.populate_board();
		
		this.images = [null] * 7;
		this.images[Colors.RED] = ImageLibrary.get_image('tiles/' + this.theme + '/red');
		this.images[Colors.ORANGE] = ImageLibrary.get_image('tiles/' + this.theme + '/orange');
		this.images[Colors.YELLOW] = ImageLibrary.get_image('tiles/' + this.theme + '/yellow');
		this.images[Colors.GREEN] = ImageLibrary.get_image('tiles/' + this.theme + '/green');
		this.images[Colors.BLUE] = ImageLibrary.get_image('tiles/' + this.theme + '/blue');
		this.images[Colors.PURPLE] = ImageLibrary.get_image('tiles/' + this.theme + '/purple');
		
		this.explode_images = [];
		for (i = 1; i <= 6; ++i) {
			img = ImageLibrary.get_image('explosion/exp' + i);
			this.explode_images.add(img);
			this.explode_images.add(img);
		}
				
		if (id > 1) {
			this.left += TILE_WIDTH * this.columns + 4;
		}
	}
	
	function populate_board() {
		list = Globals.ALL_COLORS + []; // TODO: Crayon list.clone()
		while (list.length < this.rows * this.columns) {
			list *= 2;
		}
		list.shuffle();
		i = 0;
		for (y = 0; y < INIT_COUNT ; ++y) {
			for (x = 0; x < this.columns; ++x) {
				color = list[i++];
				this.grid[x][y] = new Tile(color, x, y);
				this.counts[color]++;
			}
		}
	}
	
	function updateFirstPass(playScene) {
		if (this.fall_enabled) {
			this.fall_countdown -= 1;
			if (this.fall_countdown == 0) {
				death = this.do_fall();
				if (death) {
					// TODO: set some externally visible flag.
					this.state = 'lose';
					return;
				}
			}
		}
	}
	
	function updateSecondPass(playScene) {
		
		for (key : this.counts.keys()) {
			this.counts[key] = 0;
		}
		
		for (y = 0; y < this.rows; ++y) {
			for (x = 0; x < this.columns; ++x) {
				t = this.grid[x][y];
				if (t != null) {
					if (t.dead) {
						this.grid[x][y] = null;
					} else {
						this.counts[t.color]++;
					}
				}
			}
		}

		for (player : this.players) {
			if (this.counts[player.color] == 0) {
				this.auto_change_player_color(playScene, player);
			}
			
			player.update();
		}
	}
	
	function auto_change_player_color(playScene, player) {
		available = [];
		for (color : Globals.ALL_COLORS) {
			if (this.counts[color] > 0) {
				available.add(color);
			}
		}
		
		if (available.length == 0) {
			this.state = 'win';
		} else {
			available.shuffle();
			player.color = available[0];
		}
	}
	
	function do_bonk(player) {
		target_x = player.col;
		target_y = player.row;
		switch (player.direction) {
			case 'up': target_y--; break;
			case 'down': target_y++; break;
			case 'left': target_x--; break;
			case 'right': target_x++; break;
		}
		
		if (target_x < 0 || target_x >= this.columns || target_y < 0 || target_y >= this.rows) {
			return false;
		}
		
		target = this.grid[target_x][target_y];
		if (target == null) {
			return false;
		}
		
		if (target.color != player.color) {
			t = player.color;
			player.color = target.color;
			target.color = t;
		} else {
			this.do_spill(target_x, target_y);
		}
		return true;
	}
	
	function tryMoveVector(player, dx, dy) {
		
		if (dx != 0 && dy != 0) {
			dx = 0;
		} else if (dx == 0 && dy == 0) {
			player.freezeMovementUntilInputChange = -99;
			return;
		}
		
		if (player.freezeMovementUntilInputChange == dx * 10 + dy) {
			return;
		}
		player.freezeMovementUntilInputChange = -99;
		
		
		io = player.interpolatingObject;
		if (io.actualX != io.renderX || io.actualY != io.renderY) {
			// can only move if you're not moving.
			
			// TODO: move cancellation
			return;
		}
		oldX = player.col;
		oldY = player.row;
		newX = oldX + dx;
		newY = oldY + dy;
		
		isBonk = false;
		
		if (dx == 0) {
			player.direction = dy < 0 ? 'up' : 'down';
		} else {
			player.direction = dx < 0 ? 'left' : 'right';
		}
		if (this.isTilePassable(newX, newY)) {
			player.col = newX;
			player.row = newY;
		} else {
			isBonk = true;
		}
		
		if (isBonk) {
			this.do_bonk(player);
			
			player.freezeMovementUntilInputChange = dx * 10 + dy;
			player.freezeInvalidationCounter = FPS / 5;
		}
	}
	
	function isTilePassable(x, y) {
		if (x < 0 || y < 0 || x >= this.columns || y >= this.rows) {
			return false;
		}
			
		tile = this.grid[x][y];
		if (tile == null) {
			return true;
		}
		
		return tile.passable;
	}
	
	function do_fall() {
		if (!this.fall_enabled) return;
		
		this.fall_countdown = this.fall_interval;
		dead = false;
		for (i = 0; i < this.players.length; ++i) {
			player = this.players[i];
			if (player.row == this.rows - 1) {
				t = this.grid[player.col][this.rows - 2];
				if (t != null && !t.dead) {
					dead = true; // continue with fall so VictoryScene will show updated borad.
				}
				player.row--; // keep player at same row. will be incremented after this.
				if (dead) {
					return true;
				}
			}
			
			player.row++;
		}
		
		available = [];
		for (color : Globals.ALL_COLORS) {
			if (this.counts[color] > 0) {
				available.add(color);
			}
		}
		
		if (available.length > 0) {
			for (x = 0; x < this.columns; ++x) {
				
				t = this.grid[x][this.rows - 1];
				if (t != null && !t.dead) {
					dead = true;
				}
				
				for (y = this.rows - 1; y >= 1; --y) {
					t = this.grid[x][y - 1];
					this.grid[x][y] = t;
					if (t != null) {
						t.row++;
					}
				}
				
				this.grid[x][0] = new Tile(available[Math.floor(Random.randomFloat() * available.length)], x, 0);
			}
			
			if (dead) {
				return true;
			}
		}
		return false;
	}
	
	function do_spill(x, y) {
		visited = {};
		visited[y * this.columns + x] = 0;
		queue = [[x, y]];
		color = this.grid[x][y].color;
		
		tiles = [this.grid[x][y]];
		
		offsets = [
			[-1, 0],
			[1, 0],
			[0, -1],
			[0, 1]];
		
		generation = 1;
		
		while (queue.length > 0) {
			new_queue = [];
			for (item : queue) {
				x = item[0];
				y = item[1];
				for (offset : offsets) {
					nx = x + offset[0];
					ny = y + offset[1];
					if (nx >= 0 && nx < this.columns && ny >= 0 && ny < this.rows) {
						nindex = ny * this.columns + nx;
						if (!visited.contains(nindex)) {
							tile = this.grid[nx][ny];
							visited[nindex] = generation;
							if (tile != null && tile.color == color) {
								tiles.add(tile);
								new_queue.add([nx, ny]);
							}
						}
					}
				}
			}
			queue = new_queue;
			generation++;
		}
		
		for (tile : tiles) {
			tile.special = true;
			tile.passable = true;
			tile.death_counter = visited[tile.row * this.columns + tile.col] * -4;
		}
	}
	
	function render(rc) {
		left = this.left;
		top = this.top;
		tw2 = TILE_WIDTH / 2;
		width = TILE_WIDTH * this.columns;
		height = TILE_WIDTH * this.rows;
		
		// outline
		Graphics2D.Draw.rectangle(left - 2, top - 2, 2, height + 4, 255, 255, 255, 255);
		Graphics2D.Draw.rectangle(left - 2, top - 2, width + 4, 2, 255, 255, 255, 255);
		Graphics2D.Draw.rectangle(left + width, top - 2, 2, height + 4, 255, 255, 255, 255);
		Graphics2D.Draw.rectangle(left - 2, top + height, width + 4, 2, 255, 255, 255, 255);
		
		Graphics2D.Draw.rectangle(left, top, width, height, 0, 0, 0, 128);
		colors = Globals._COLORS;
		
		activeColor = this.players[0].color;
		
		p1y = this.players[0].row;
		p2y = -1;
		if (this.players.length > 1) {
			p2y = this.players[1].row;
		}
		
		for (y = 0; y < this.rows; ++y) {
			for (x = 0; x < this.columns; ++x) {
				t = this.grid[x][y];
				if (t != null) {
					tx = left + x * TILE_WIDTH;
					ty = top + y * TILE_WIDTH;
					c = t.color;
					if (c == activeColor) {
						bounceFactor = 6;
						speed = 1.0;
					} else {
						bounceFactor = 4;
						speed = 0.1;
					}
					ty -= Math.floor(Math.abs(Math.sin(x + y * 37 + (speed * 1.5 * 2 * 3.14159) * rc / FPS) * bounceFactor));
					img = this.images[c];
					if (t.special) {
						t.render_special(tx, ty, rc, img, this.explode_images);
					} else {
						img.drawRegionStretched(
							tx, ty,
							32, 32,
							0, 0,
							16, 16);
					}
				}
			}
		}
		
		for (player : this.players) {
			pxpy = player.getRenderCoords();
			px = left + pxpy[0];
			py = top + pxpy[1];
			
			player_image = player.get_image(rc);
			player_image.drawRegionStretched( 
				px, py,
				32, 32,
				0, 0,
				16, 16);
		}
	}
}
